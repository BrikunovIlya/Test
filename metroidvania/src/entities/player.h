#pragma once
#include "physics.h"
#include <vector>
#include <map>

/**
 * @brief Класс, представляющий игрового персонажа.
 * 
 * Класс Player управляет позицией, движением, способностями и взаимодействием персонажа
 * с игровым миром, включая прыжки, рывки, атаки и сбор предметов.
 */
class Player {
public:
    /** @brief Координата x персонажа в игровом мире. */
    float x;
    /** @brief Координата y персонажа в игровом мире. */
    float y;
    /** @brief Горизонтальная скорость персонажа. */
    float dx = 0;
    /** @brief Вертикальная скорость персонажа. */
    float dy = 0;
    /** @brief Текущее здоровье персонажа. */
    int health = 100;
    /** @brief Максимальное здоровье персонажа. */
    int maxHealth = 100;
    /** @brief Указывает, находится ли персонаж на земле. */
    bool onGround = false;
    /** @brief Указывает, повернут ли персонаж вправо. */
    bool facingRight = true;
    /** @brief Оставшиеся кадры неуязвимости после получения урона. */
    int invincibility = 0;
    /** @brief Количество собранных ключей. */
    int keys = 0;
    /** @brief Количество собранных монет. */
    int coins = 0;
    /** @brief Указывает, может ли персонаж выполнить двойной прыжок. */
    bool hasDoubleJump = false;
    /** @brief Таймер перезарядки способности рывка. */
    int dashCooldown = 0;
    /** @brief Длительность действия рывка. */
    int dashTimer = 0;
    /** @brief Таймер перезарядки атаки. */
    int attackCooldown = 0;
    /** @brief Список активных снарядов, выпущенных персонажем. */
    std::vector<std::pair<float, float>> projectiles;
    /** @brief Словарь способностей персонажа и их состояния (включено/выключено). */
    std::map<std::string, bool> abilities;
    /** @brief Координата x последней контрольной точки. */
    int checkpointX = 0;
    /** @brief Координата y последней контрольной точки. */
    int checkpointY = 0;
    /** @brief Текущий счет персонажа. */
    int score = 0;

    /**
     * @brief Конструктор класса Player, задающий начальную позицию персонажа.
     * @param startX Начальная координата x персонажа.
     * @param startY Начальная координата y персонажа.
     */
    Player(float startX, float startY);

    /**
     * @brief Обновляет состояние персонажа, включая движение и перезарядку способностей.
     * @param map Игровая карта для проверки столкновений.
     */
    void Update(std::vector<std::vector<int>>& map);

    /**
     * @brief Выполняет прыжок или двойной прыжок, если доступно.
     */
    void Jump();

    /**
     * @brief Инициирует рывок, если способность доступна и не на перезарядке.
     */
    void Dash();

    /**
     * @brief Выполняет атаку, создавая снаряд, если атака не на перезарядке.
     */
    void Attack();

    /**
     * @brief Обновляет позиции всех активных снарядов и удаляет те, что вышли за границы.
     */
    void UpdateProjectiles();

    /**
     * @brief Отрисовывает персонажа на экране с учетом смещения.
     * @param offsetX Смещение по x для рендеринга (позиция камеры).
     * @param offsetY Смещение по y для рендеринга (позиция камеры).
     */
    void Draw(int offsetX, int offsetY) const;
};
#pragma once
#include "level.h"
#include "../entities/player.h"
#include <vector>
#include <atomic>
#include <thread>

/**
 * @brief Класс, представляющий основную игровую логику.
 * 
 * Класс Game управляет состоянием игры, игроком, уровнем, вводом, рендерингом и фоновой музыкой.
 */
class Game {
public:
    /** @brief Перечисление состояний игры. */
    enum State { MAIN_MENU, PLAYING, PAUSED };
    
    /** @brief Текущее состояние игры (меню, игра, пауза). */
    State state = MAIN_MENU;
    /** @brief Объект уровня, содержащий карту и тайлы. */
    Level level;
    /** @brief Объект игрока, управляющий его характеристиками и действиями. */
    Player player{2.0f, 16.0f};
    /** @brief Текущий счет игрока. */
    int score = 0;
    /** @brief Флаг, указывающий, проигрывается ли фоновая музыка. */
    std::atomic<bool> musicPlaying{false};
    /** @brief Поток для воспроизведения фоновой музыки. */
    std::thread musicThread;

    /**
     * @brief Конструктор класса Game.
     * 
     * Инициализирует консоль и запускает поток фоновой музыки.
     */
    Game();

    /**
     * @brief Деструктор класса Game.
     * 
     * Останавливает музыку и завершает поток, если он активен.
     */
    ~Game();
    
    /**
     * @brief Запускает основной игровой цикл.
     */
    void Run();

    /**
     * @brief Обрабатывает пользовательский ввод.
     */
    void ProcessInput();

    /**
     * @brief Обновляет состояние игры (игрока, врагов, логику).
     */
    void Update();

    /**
     * @brief Отрисовывает текущее состояние игры (меню, игровой мир или паузу).
     */
    void Render();

    /**
     * @brief Воспроизводит фоновую музыку в отдельном потоке.
     */
    void PlayBackgroundMusic();

    /**
     * @brief Сохраняет текущее состояние игры в файл.
     */
    void SaveGame();

    /**
     * @brief Загружает состояние игры из файла.
     */
    void LoadGame();
};
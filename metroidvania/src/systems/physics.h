#pragma once

/** @brief Сила гравитации, применяемая к объектам. */
constexpr float GRAVITY = 0.5f;
/** @brief Сила прыжка игрока. */
constexpr float JUMP_FORCE = -8.0f;
/** @brief Ускорение при движении игрока. */
constexpr float MOVE_ACCEL = 0.8f;
/** @brief Максимальная скорость движения. */
constexpr float MAX_SPEED = 4.0f;
/** @brief Коэффициент трения для замедления движения. */
constexpr float FRICTION = 0.85f;

/**
 * @brief Пространство имен для физических расчетов в игре.
 * 
 * Содержит функции для применения гравитации, трения, ограничения скорости и проверки столкновений.
 */
namespace Physics {
    /**
     * @brief Применяет гравитацию к вертикальной скорости объекта.
     * @param dy Вертикальная скорость объекта (модифицируется).
     * @param onGround Указывает, находится ли объект на земле.
     */
    void ApplyGravity(float& dy, bool onGround);

    /**
     * @brief Применяет трение к горизонтальной скорости объекта.
     * @param dx Горизонтальная скорость объекта (модифицируется).
     */
    void ApplyFriction(float& dx);

    /**
     * @brief Ограничивает горизонтальную и вертикальную скорость объекта.
     * @param dx Горизонтальная скорость объекта (модифицируется).
     * @param dy Вертикальная скорость объекта (модифицируется).
     */
    void LimitVelocity(float& dx, float& dy);

    /**
     * @brief Проверяет наличие столкновения с тайлом карты.
     * @param x Координата x для проверки.
     * @param y Координата y для проверки.
     * @param map Игровая карта для проверки столкновений.
     * @return true, если есть столкновение (тайл является стеной или координаты вне карты), иначе false.
     */
    bool CheckCollision(float x, float y, const std::vector<std::vector<int>>& map);
}
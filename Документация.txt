Техническое задание для проекта "Metroid-like Game"

1. Общие сведения
Проект представляет собой консольную игру в стиле Metroid, где игрок управляет персонажем, сражается с врагами, собирает бонусы и перемещается по карте с платформами. Цель игры — уничтожить всех врагов, избегая смерти персонажа.

2. Технические требования
2.1. Платформа
- Операционная система: Windows (используются библиотеки Windows.h и conio.h).
- Компилятор: Любой C++ компилятор, поддерживающий стандарт C++11 и выше (например, g++).

2.2. Используемые библиотеки
- iostream: Для ввода-вывода данных (вывод карты, сообщений, чтение ввода).
- vector: Для динамического хранения объектов (карта, враги, снаряды).
- conio.h: Для обработки ввода с клавиатуры (_kbhit(), _getch()).
- windows.h: Для управления консолью (функция gotoxy для позиционирования курсора).
- cstdlib: Для функций system("cls") и exit().
- ctime: Для генерации случайных чисел (srand() и time()).
- algorithm: Для использования remove_if при удалении неактивных снарядов.

2.3. Аппаратные требования
- Минимальные: Любой современный ПК с Windows, способный запускать консольные приложения.
- Рекомендуемые: Процессор 1 ГГц, 512 МБ ОЗУ, консоль с поддержкой ANSI-символов.

3. Функциональные требования
3.1. Основные механики игры
- Игрок управляет персонажем, который может двигаться влево/вправо, прыгать и стрелять.
- На карте присутствуют враги, движущиеся по заданным траекториям.
- Игрок может собирать бонусы: 'H' (восстановление здоровья) и '*' (очки).
- При столкновении с врагом игрок теряет здоровье.
- Снаряды, выпущенные игроком, наносят урон врагам.

3.2. Карта
- Размер карты: 40x20 символов.
- Элементы карты:
- '#': Стены, платформы, пол и потолок.
- 'H': Аптечка (восстанавливает здоровье).
- '*': Бонус (добавляет очки).
- Платформы на разных уровнях высоты для прыжков.

3.3. Управление
- A/D: Движение влево/вправо.
- W: Прыжок.
- S: Выстрел.
- Q: Выход из игры.

3.4. Физика
- Гравитация: Персонаж падает вниз, если не на платформе.
- Прыжки: Игрок может прыгать с земли с заданной силой (jumpPower = 3).
- Коллизии: Проверяются столкновения с платформами, стенами и врагами.

3.5. Враги
- Количество врагов: 3 (задаются фиксированные начальные позиции).
- Поведение: Движутся влево/вправо, меняя направление при столкновении со стенами.
- Здоровье: 30 единиц, при попадании снаряда теряют 20 единиц.
- При смерти врага игрок получает 100 очков.

3.6. Снаряды
- Снаряды движутся влево или вправо в зависимости от направления игрока.
- Скорость: 2 символа за обновление.
- При столкновении с врагом или стеной снаряд исчезает.

3.7. Интерфейс
- Отображение карты с символами (игрок: '>'/<', враги: 'E', снаряды: '-', платформы: '#').
- Интерфейс: Отображение здоровья, очков и количества врагов.
- Задержка: 100 мс между кадрами для плавности.

3.8. Условия окончания игры
- Победа: Все враги уничтожены.
- Поражение: Здоровье игрока = 0.

4. Технические аспекты
4.1. Структура проекта
- Класс Player: Управление игроком (позиция, здоровье, прыжки, движение).
- Класс Enemy: Управление врагами (позиция, здоровье, движение).
- Класс Projectile: Управление снарядами (позиция, направление, активность).
- Класс Game: Логика игры (карта, обновление, рендеринг, обработка ввода).

4.2. Управление памятью
- Вектор map (vector<vector<char>>): Хранит карту.
- Векторы enemies и projectiles: Хранят врагов и снаряды.
- Освобождение памяти: Векторы автоматически управляют памятью.

4.3. Производительность
- Задержка Sleep(100) для ограничения частоты кадров.
- Простые алгоритмы для проверки коллизий и обновления состояния.

5. Требования к тестированию
- Проверка корректности движения игрока (влево/вправо, прыжки).
- Проверка работы снарядов (движение, столкновения).
- Проверка поведения врагов (движение, нанесение урона).
- Проверка условий победы и поражения.

6. Ограничения
- Игра работает только на Windows из-за использования Windows.h и conio.h.
- Нет поддержки сохранения прогресса.
- Простая графика (символы ASCII).
